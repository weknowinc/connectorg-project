<?php

/**
 * @file
 * Contains connectorg_employee_engagement.module.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Cache\Cache;
use Drupal\Component\Serialization\Json;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param RouteMatchInterface $route_match
 *
 * @return string
 */
function connectorg_employee_engagement_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the connectorg_employee_engagement module.
    case 'help.page.connectorg_employee_engagement':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Module created to manage employee engagement based on rewards') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function connectorg_employee_engagement_preprocess_taxonomy_term(&$variables) {
  if ($variables['view_mode'] == 'send_star') {
    $type = !empty($variables['elements']['#taxonomy_term']) ? $variables['elements']['#taxonomy_term'] : NULL;
    if (!empty($type)) {
      $type = $type->id();
    }
    if (\Drupal::routeMatch()->getRouteName() === 'entity.user.canonical') {
      $user = \Drupal::routeMatch()->getRawParameter('user');
      $send_star_url = Url::fromRoute('connectorg_employee_engagement.send_a_star_type_to_user', [
        'type' => $type,
        'user' => $user,
      ]);
    }
    else {
      $send_star_url = Url::fromRoute('connectorg_employee_engagement.send_a_star_type', ['type' => $type]);
    }
    $variables['send_star_url'] = $send_star_url->toString();
    $variables['send_star_link'] = [
      '#type' => 'link',
      '#title' => t('Send'),
      '#url' => $send_star_url,
      '#attributes' => [
        'class' => ['use-ajax'],
        'data-dialog-type' => 'modal',
        'data-dialog-options' => Json::encode([
          'width' => 700,
        ]),
      ],
    ];
    $variables['#cache']['max-age'] = Cache::PERMANENT;
    $variables['#cache']['contexts'][] = 'url';
  }
}

/**
 * Implements hook_theme().
 */
function connectorg_employee_engagement_theme($existing, $type, $theme, $path) {
  return [
    'star_entity' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for star entity templates.
 *
 * Default template: star-entity.html.twig.
 */
function template_preprocess_star_entity(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['star'] = $variables['elements']['#star_entity'];
  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $star = $variables['star'];

  $user_from = $star->get('user_id')->referencedEntities();
  $user_from = current($user_from);
  $variables['user_from']['user'] = $user_from;
  $variables['user_from']['url'] = $user_from->toUrl()->toString();
  $picture = NULL;
  if (!$user_from->get('user_picture')->isEmpty()) {
    $picture = $user_from->get('user_picture')->entity->getFileUri();
    $picture = ImageStyle::load('thumbnail')->buildUrl($picture);
  }
  $variables['user_from']['picture'] = $picture;

  $user_to = $star->get('field_employee')->referencedEntities();
  $user_to = current($user_to);
  $variables['user_to']['user'] = $user_to;
  $variables['user_to']['url'] = $user_to->toUrl()->toString();
  $picture = NULL;
  if (!$user_to->get('user_picture')->isEmpty()) {
    $picture = $user_to->get('user_picture')->entity->getFileUri();
    $picture = ImageStyle::load('thumbnail')->buildUrl($picture);
  }
  $variables['user_to']['picture'] = $picture;

  $type = $star->get('field_type')->referencedEntities();
  $type = current($type);
  $variables['type'] = $type->label();
  $type_icon = NULL;
  if(!$type->get('field_image')->isEmpty()) {
    $type_icon = $type->get('field_image')->entity->getFileUri();
    $type_icon = ImageStyle::load('thumbnail')->buildUrl($type_icon);
  }
  $variables['type_icon'] = $type_icon;
  $variables['message'] = $star->get('field_message')->value;
  $variables['date'] = \Drupal::service('date.formatter')
    ->format($star->getCreatedTime(), 'short_date');

  $variables['user_from']['own_page'] = FALSE;
  $variables['user_to']['own_page'] = FALSE;
  $variables['is_user_page'] = (\Drupal::routeMatch()->getRouteName() === 'entity.user.canonical');
  if ($variables['is_user_page']) {
    $user = \Drupal::routeMatch()->getParameter('user');
    $variables['user_from']['own_page'] = ($user_from->id() === $user->id());
    $variables['user_to']['own_page'] = ($user_to->id() === $user->id());
  }

  $variables['#cache']['max-age'] = Cache::PERMANENT;
  $variables['#cache']['contexts'][] = 'url';
}

